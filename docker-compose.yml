version: "3.8"

services:
  # MySQL Database
  db:
    image: mysql:8.0
    container_name: ngx_manager_mysql_db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${DB_PORT}:3306"
    networks:
      - ngx_network

  # Backend API Server
  server:
    build:
      context: .
      dockerfile: docker/server/Dockerfile
    container_name: ngx_manager_backend_server
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV}
      # Default DB_HOST to internal service name if not provided
      DB_HOST: ${DB_HOST:-db}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      DB_NAME: ${DB_NAME}
      JWT_SECRET: ${JWT_SECRET}
      SERVER_PORT: ${SERVER_PORT}
      NGINX_CONFIG_PATH: /etc/nginx/conf.d
      CERTBOT_CONFIG_DIR: /etc/letsencrypt
      CERTBOT_WORK_DIR: /var/lib/letsencrypt
      CERTBOT_LOGS_DIR: /var/log/letsencrypt
      CERTBOT_WEBROOT: /var/www/certbot
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    volumes:
      - nginx_configs:/etc/nginx/conf.d
      - certbot_certs:/etc/letsencrypt
      - certbot_www:/var/www/certbot
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - db
      - db-init
    networks:
      - ngx_network

  # Frontend Client
  client:
    build:
      context: .
      dockerfile: docker/client/Dockerfile
      args:
        - VITE_API_URL=${VITE_API_URL}
    container_name: ngx_manager_frontend_client
    restart: unless-stopped
    ports:
      - "${CLIENT_PORT}:3000"
    depends_on:
      - server
    networks:
      - ngx_network

  # One-off initializer to ensure application DB user & grants exist (idempotent)
  db-init:
    image: mysql:8.0
    container_name: ngx_manager_db_init
    environment:
      DB_HOST: db
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    depends_on:
      - db
    entrypoint: |
      sh -c '
      set -e
      echo "Waiting for MySQL..."
      until mysqladmin ping -h "$DB_HOST" -uroot -p"$DB_ROOT_PASSWORD" --silent; do sleep 2; done
      echo "Ensuring database and user..."
      mysql -h "$DB_HOST" -uroot -p"$DB_ROOT_PASSWORD" -e "CREATE DATABASE IF NOT EXISTS \`$DB_NAME\`;"
      mysql -h "$DB_HOST" -uroot -p"$DB_ROOT_PASSWORD" -e "CREATE USER IF NOT EXISTS '$DB_USER'@'%' IDENTIFIED BY '$DB_PASSWORD';" || true
      mysql -h "$DB_HOST" -uroot -p"$DB_ROOT_PASSWORD" -e "ALTER USER '$DB_USER'@'%' IDENTIFIED BY '$DB_PASSWORD';" || true
      mysql -h "$DB_HOST" -uroot -p"$DB_ROOT_PASSWORD" -e "GRANT ALL PRIVILEGES ON \`$DB_NAME\`.* TO '$DB_USER'@'%';"
      mysql -h "$DB_HOST" -uroot -p"$DB_ROOT_PASSWORD" -e "FLUSH PRIVILEGES;"
      echo "DB init complete."
      '
    restart: "no"
    networks:
      - ngx_network

  # Nginx Proxy Server
  nginx:
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
    container_name: ngx_manager_nginx_proxy
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT}:80"
      - "${NGINX_HTTPS_PORT}:443"
    volumes:
      - nginx_configs:/etc/nginx/conf.d
      - /etc/letsencrypt:/etc/letsencrypt
    depends_on:
      - server
      - client
    networks:
      - ngx_network

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: ngx_manager_certbot_ssl
    restart: unless-stopped
    volumes:
      - certbot_certs:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - ngx_network

volumes:
  mysql_data:
  nginx_configs:
  certbot_certs:
  certbot_www:
  nginx_ssl:

networks:
  ngx_network:
    driver: bridge

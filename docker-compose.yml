version: '3.8'

services:
  # MySQL Database
  db:
    image: mysql:8.0
    container_name: ngx_manager_db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: nginx_proxy_manager
      MYSQL_USER: ngx_user
      MYSQL_PASSWORD: ngx_password
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "3306:3306"
    networks:
      - ngx_network

  # Backend API Server
  server:
    build:
      context: .
      dockerfile: docker/server/Dockerfile
    container_name: ngx_manager_server
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DB_HOST=db
      - DB_PORT=3306
      - DB_USER=ngx_user
      - DB_PASSWORD=ngx_password
      - DB_NAME=nginx_proxy_manager
      - JWT_SECRET=your_jwt_secret_change_this_in_production
      - PORT=3001
      - NGINX_CONFIG_PATH=/etc/nginx/conf.d
      - CERTBOT_CERTS_PATH=/etc/letsencrypt
      - CERTBOT_WWW_PATH=/var/www/certbot
    volumes:
      - nginx_configs:/etc/nginx/conf.d
      - certbot_certs:/etc/letsencrypt
      - certbot_www:/var/www/certbot
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - "3001:3001"
    depends_on:
      - db
    networks:
      - ngx_network

  # Frontend Client
  client:
    build:
      context: .
      dockerfile: docker/client/Dockerfile
    container_name: ngx_manager_client
    restart: unless-stopped
    environment:
      - VITE_API_URL=http://server:3001
    ports:
      - "3000:3000"
    depends_on:
      - server
    networks:
      - ngx_network

  # Nginx Proxy Server
  nginx:
    image: nginx:alpine
    container_name: ngx_manager_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - nginx_configs:/etc/nginx/conf.d
      - certbot_certs:/etc/letsencrypt
      - certbot_www:/var/www/certbot
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - client
      - server
    networks:
      - ngx_network
    command: ["/bin/sh", "-c", "while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g 'daemon off;'"]

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: ngx_manager_certbot
    restart: unless-stopped
    volumes:
      - certbot_certs:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - ngx_network

volumes:
  mysql_data:
  nginx_configs:
  certbot_certs:
  certbot_www:

networks:
  ngx_network:
    driver: bridge
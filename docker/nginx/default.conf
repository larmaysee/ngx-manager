# Default configuration for Nginx Proxy Manager interface
server {
    listen 80;
    server_name _;
    
    # Define upstream variables to prevent early hostname resolution
    set $backend_server "server:5000";
    set $frontend_client "client:3000";

    # Let's Encrypt challenge location
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    # Conditional HTTPS redirect - only for proper domains, not IP addresses
    location @redirect_https {
        return 301 https://$host$request_uri;
    }

    # Backend API
    location /api/ {
        # Redirect to HTTPS only if host is a domain (contains dots and not an IP)
        if ($host ~ "^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$") {
            return 301 https://$host$request_uri;
        }
        
        proxy_pass http://$backend_server;
        proxy_intercept_errors on;
        error_page 502 503 504 = @backend_unavailable;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # Rate limiting for API
        limit_req zone=api burst=20 nodelay;
    }

    # Special rate limiting for login endpoint
    location /api/auth/login {
        # Redirect to HTTPS only if host is a domain (contains dots and not an IP)
        if ($host ~ "^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$") {
            return 301 https://$host$request_uri;
        }
        
        proxy_pass http://$backend_server;
        proxy_intercept_errors on;
        error_page 502 503 504 = @backend_unavailable;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Stricter rate limiting for login
        limit_req zone=login burst=5 nodelay;
    }

    # Frontend (React app) - default location
    location / {
        # Redirect to HTTPS only if host is a domain (contains dots and not an IP)
        if ($host ~ "^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$") {
            return 301 https://$host$request_uri;
        }
        
        proxy_pass http://$frontend_client;
        proxy_intercept_errors on;
        error_page 502 503 504 = @frontend_unavailable;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
    }
    
    # Error handling for unavailable upstream servers
    location @backend_unavailable {
        return 503 "Backend server is temporarily unavailable";
        add_header Content-Type text/plain;
    }
    
    location @frontend_unavailable {
        return 503 "Frontend server is temporarily unavailable";
        add_header Content-Type text/plain;
    }
}

# HTTPS configuration for management interface
server {
    listen 443 ssl;
    http2 on;
    server_name _;
    
    # Define upstream variables to prevent early hostname resolution
    set $backend_server "server:5000";
    set $frontend_client "client:3000";

    # SSL certificate (will be generated by certbot)
    ssl_certificate /etc/letsencrypt/live/default/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/default/privkey.pem;

    # Fallback to self-signed certificate if Let's Encrypt is not available
    ssl_certificate /etc/nginx/ssl/nginx-selfsigned.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx-selfsigned.key;

    # Frontend (React app)
    location / {
        proxy_pass http://$frontend_client;
        proxy_intercept_errors on;
        error_page 502 503 504 = @frontend_unavailable;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
    }

    # Backend API
    location /api/ {
        proxy_pass http://$backend_server;
        proxy_intercept_errors on;
        error_page 502 503 504 = @backend_unavailable;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # Rate limiting for API
        limit_req zone=api burst=20 nodelay;
    }

    # Special rate limiting for login endpoint
    location /api/auth/login {
        proxy_pass http://$backend_server;
        proxy_intercept_errors on;
        error_page 502 503 504 = @backend_unavailable;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Stricter rate limiting for login
        limit_req zone=login burst=5 nodelay;
    }

    # WebSocket support (if needed)
    location /ws {
        proxy_pass http://$backend_server;
        proxy_intercept_errors on;
        error_page 502 503 504 = @backend_unavailable;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Error handling for unavailable upstream servers
    location @backend_unavailable {
        return 503 "Backend server is temporarily unavailable";
        add_header Content-Type text/plain;
    }
    
    location @frontend_unavailable {
        return 503 "Frontend server is temporarily unavailable";
        add_header Content-Type text/plain;
    }
}
version: "3.8"

services:
  # MySQL Database
  db:
    image: mysql:8.0
    container_name: ngx_manager_db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-CHANGE_ME_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${DB_PORT}:3306"
    networks:
      - ngx_network
    # Security: Limit resources
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"

  # Backend API Server
  server:
    build:
      context: .
      dockerfile: docker/server/Dockerfile
    container_name: ngx_manager_server
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      SERVER_PORT: ${SERVER_PORT}
      DB_HOST: ${DB_HOST:-db}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      DB_NAME: ${DB_NAME}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-24h}
      NGINX_CONFIG_PATH: /etc/nginx/conf.d
      CERTBOT_CONFIG_DIR: /etc/letsencrypt
      CERTBOT_WORK_DIR: /var/lib/letsencrypt
      CERTBOT_LOGS_DIR: /var/log/letsencrypt
      CERTBOT_WEBROOT: /var/www/certbot
      LOG_LEVEL: ${LOG_LEVEL:-info}
      FRONTEND_URL: ${FRONTEND_URL}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
      AUTH_RATE_LIMIT_MAX_REQUESTS: ${AUTH_RATE_LIMIT_MAX_REQUESTS:-5}
      MIN_PASSWORD_LENGTH: ${MIN_PASSWORD_LENGTH:-12}
      MAX_LOGIN_ATTEMPTS: ${MAX_LOGIN_ATTEMPTS:-5}
      LOCKOUT_TIME_MS: ${LOCKOUT_TIME_MS:-900000}
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    volumes:
      - nginx_configs:/etc/nginx/conf.d
      - certbot_certs:/etc/letsencrypt
      - certbot_www:/var/www/certbot
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Security: Logs volume for Winston
      - ./logs:/app/logs
    depends_on:
      - db
      - db-init
    networks:
      - ngx_network
    # Security: Limit resources
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.3"
    # Security: Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${SERVER_PORT}/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Client
  client:
    build:
      context: .
      dockerfile: docker/client/Dockerfile
      args:
        - VITE_API_URL=${VITE_API_URL}
    container_name: ngx_manager_client
    restart: unless-stopped
    ports:
      - "${CLIENT_PORT}:${CLIENT_PORT}"
    depends_on:
      - server
    networks:
      - ngx_network

  # One-off initializer to ensure application DB user & grants exist (idempotent)
  db-init:
    image: mysql:8.0
    container_name: ngx_manager_db_init
    environment:
      DB_HOST: db
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    depends_on:
      - db
    entrypoint: |
      sh -c '
      set -e
      echo "Waiting for MySQL..."
      until mysqladmin ping -h "$DB_HOST" -uroot -p"$DB_ROOT_PASSWORD" --silent; do sleep 2; done
      echo "Ensuring database and user..."
      mysql -h "$DB_HOST" -uroot -p"$DB_ROOT_PASSWORD" -e "CREATE DATABASE IF NOT EXISTS \`$DB_NAME\`;"
      mysql -h "$DB_HOST" -uroot -p"$DB_ROOT_PASSWORD" -e "CREATE USER IF NOT EXISTS '$DB_USER'@'%' IDENTIFIED BY '$DB_PASSWORD';" || true
      mysql -h "$DB_HOST" -uroot -p"$DB_ROOT_PASSWORD" -e "ALTER USER '$DB_USER'@'%' IDENTIFIED BY '$DB_PASSWORD';" || true
      mysql -h "$DB_HOST" -uroot -p"$DB_ROOT_PASSWORD" -e "GRANT ALL PRIVILEGES ON \`$DB_NAME\`.* TO '$DB_USER'@'%';"
      mysql -h "$DB_HOST" -uroot -p"$DB_ROOT_PASSWORD" -e "FLUSH PRIVILEGES;"
      echo "DB init complete."
      '
    restart: "no"
    networks:
      - ngx_network
    # Security: Limit resources
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.2"

  # Nginx Proxy Server (Only service with exposed ports)
  # Nginx Proxy Server
  nginx:
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
    container_name: ngx_manager_nginx_proxy
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT}:80"
      - "${NGINX_HTTPS_PORT}:443"
    volumes:
      - nginx_configs:/etc/nginx/conf.d
      - /etc/letsencrypt:/etc/letsencrypt
    depends_on:
      - server
      - client
    networks:
      - ngx_network

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: ngx_manager_certbot
    restart: unless-stopped
    volumes:
      - certbot_certs:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - ngx_network
    # Security: Limit resources
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: "0.1"

volumes:
  mysql_data:
    driver: local
  nginx_configs:
    driver: local
  certbot_certs:
    driver: local
  certbot_www:
    driver: local

networks:
  ngx_network:
    driver: bridge
    # Security: Enable network isolation
    internal: false
    ipam:
      config:
        - subnet: 172.20.0.0/16
# ============================================================================
# PRODUCTION SECURITY FEATURES:
# ============================================================================
# ✓ Database port not exposed to host (only accessible within network)
# ✓ API server port not exposed to host (only accessible through nginx)
# ✓ Client port not exposed to host (only accessible through nginx)
# ✓ All secrets loaded from environment variables
# ✓ Resource limits applied to all services
# ✓ Health checks for critical services
# ✓ Read-only volumes where possible
# ✓ Network isolation with custom subnet
# ✓ Non-root user for database
# ✓ Proper restart policies
# ============================================================================

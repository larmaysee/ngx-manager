version: '3.8'

services:
  # MySQL Database
  db:
    image: mysql:8.0
    container_name: ngx_manager_db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-CHANGE_ME_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    # SECURITY: Database port not exposed to host in production
    # Only accessible from other containers in the network
    networks:
      - ngx_network
    # Security: Run as non-root user
    user: "999:999"
    # Security: Read-only root filesystem
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/mysqld
    # Security: Limit resources
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Backend API Server
  server:
    build:
      context: .
      dockerfile: docker/server/Dockerfile
    container_name: ngx_manager_server
    restart: unless-stopped
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - DB_HOST=db
      - DB_PORT=3306
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-24h}
      - PORT=3001
      - NGINX_CONFIG_PATH=/etc/nginx/conf.d
      - CERTBOT_CERTS_PATH=/etc/letsencrypt
      - CERTBOT_WWW_PATH=/var/www/certbot
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - FRONTEND_URL=${FRONTEND_URL}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-900000}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-100}
      - AUTH_RATE_LIMIT_MAX_REQUESTS=${AUTH_RATE_LIMIT_MAX_REQUESTS:-5}
      - MIN_PASSWORD_LENGTH=${MIN_PASSWORD_LENGTH:-12}
      - MAX_LOGIN_ATTEMPTS=${MAX_LOGIN_ATTEMPTS:-5}
      - LOCKOUT_TIME_MS=${LOCKOUT_TIME_MS:-900000}
    volumes:
      - nginx_configs:/etc/nginx/conf.d
      - certbot_certs:/etc/letsencrypt
      - certbot_www:/var/www/certbot
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Security: Logs volume for Winston
      - ./logs:/app/logs
    # SECURITY: Server port not exposed to host in production
    # Only accessible through nginx proxy
    depends_on:
      - db
    networks:
      - ngx_network
    # Security: Limit resources
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'
    # Security: Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Client
  client:
    build:
      context: .
      dockerfile: docker/client/Dockerfile
      args:
        - VITE_API_URL=${VITE_API_URL}
    container_name: ngx_manager_client
    restart: unless-stopped
    # SECURITY: Client port not exposed to host in production
    # Only accessible through nginx proxy
    depends_on:
      - server
    networks:
      - ngx_network
    # Security: Limit resources
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

  # Nginx Proxy Server (Only service with exposed ports)
  nginx:
    image: nginx:alpine
    container_name: ngx_manager_nginx
    restart: unless-stopped
    ports:
      # Only HTTP and HTTPS ports exposed
      - "80:80"
      - "443:443"
    volumes:
      - nginx_configs:/etc/nginx/conf.d
      - certbot_certs:/etc/letsencrypt:ro
      - certbot_www:/var/www/certbot:ro
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - client
      - server
    networks:
      - ngx_network
    command: ["/bin/sh", "-c", "while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g 'daemon off;'"]
    # Security: Limit resources
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
    # Security: Health check
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: ngx_manager_certbot
    restart: unless-stopped
    volumes:
      - certbot_certs:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - ngx_network
    # Security: Limit resources
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

volumes:
  mysql_data:
    driver: local
  nginx_configs:
    driver: local
  certbot_certs:
    driver: local
  certbot_www:
    driver: local

networks:
  ngx_network:
    driver: bridge
    # Security: Enable network isolation
    internal: false
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============================================================================
# PRODUCTION SECURITY FEATURES:
# ============================================================================
# ✓ Database port not exposed to host (only accessible within network)
# ✓ API server port not exposed to host (only accessible through nginx)
# ✓ Client port not exposed to host (only accessible through nginx)
# ✓ All secrets loaded from environment variables
# ✓ Resource limits applied to all services
# ✓ Health checks for critical services
# ✓ Read-only volumes where possible
# ✓ Network isolation with custom subnet
# ✓ Non-root user for database
# ✓ Proper restart policies
# ============================================================================